package com.ouaskanas.educonnect.Web;import com.ouaskanas.educonnect.Dao.Entities.FriendShipStatus;import com.ouaskanas.educonnect.Dao.Entities.Friendship;import com.ouaskanas.educonnect.Dao.Entities.User;import com.ouaskanas.educonnect.Dao.Repositories.FriendshipRepository;import com.ouaskanas.educonnect.Dao.Repositories.UserRepository;import com.ouaskanas.educonnect.Service.Service.FriendshipService;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.http.HttpStatus;import org.springframework.http.ResponseEntity;import org.springframework.security.core.annotation.AuthenticationPrincipal;import org.springframework.web.bind.annotation.*;import java.util.ArrayList;import java.util.List;@RestController@RequestMapping("/api/v1/friendship")public class FriendshipController {    @Autowired    private FriendshipService friendshipService;    @Autowired    private FriendshipRepository friendshipRepository;    @GetMapping("/friendshiplist")    public List<Friendship> getFriendshipList(User user){        int user_id = user.getUser_id();        List<Friendship> friendships = friendshipService.friendshipListforUser(user_id);        List<Friendship> actualF = new ArrayList<>();        for(Friendship friendship : friendships){            if(friendship.getStatus() == FriendShipStatus.ACCEPTED)                actualF.add(friendship);        }        return actualF;    }    @GetMapping("/pendinglist")    public List<Friendship> getPendingList(@AuthenticationPrincipal User user){        int user_id = user.getUser_id();        List<Friendship> friendships =friendshipService.friendshipListforUser(user_id);        List<Friendship> actualF = new ArrayList<>();        for(Friendship friendship:friendships){            if(friendship.getStatus() ==FriendShipStatus.PENDING){                actualF.add(friendship);            };        }        return actualF;    }    @PostMapping("/sendfriendship")    public ResponseEntity<Friendship> sendFriendship(@RequestBody int friend_id,@AuthenticationPrincipal User user) {        int user_id = user.getUser_id();        try {            Friendship friendship = friendshipService.sendFriendShipRequest(user_id, friend_id);            return ResponseEntity.status(HttpStatus.CREATED).body(friendship);        } catch (Exception e) {            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body(null);        }    }    @PutMapping("/acceptfriendship")    public ResponseEntity<Friendship> addFriendship(@RequestBody int friendship_id) {         if(!friendshipRepository.existsById(friendship_id)){             return ResponseEntity.status(HttpStatus.NOT_FOUND).body(null);         }         Friendship friendship = friendshipService.acceptFriendshipRequest(friendship_id);         return ResponseEntity.status(HttpStatus.OK).body(friendship);    }    @PutMapping("/declinefriendship")    public ResponseEntity<Friendship> declineFriendship(@RequestBody int friendship_id) {        Friendship friendship = friendshipRepository.findById(friendship_id).get();        friendship.setStatus(FriendShipStatus.DECLINED);        friendshipService.declineFriendshipRequest(friendship_id);        return ResponseEntity.status(HttpStatus.OK).body(friendship);    }}